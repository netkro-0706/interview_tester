{
    "List":[
        {
            "id":0,
            "Question":"チーム内のpositionは?",
            "Anser1":"issueが上がったらそのissueを解決するpositionでした。",
            "Anser2":"설계와 PM이 있었고 프론트3명 백엔드3명으로 개발인원은 6명 총 8명이서 팀을 이루었다."
        },
        {
            "id":1,
            "Question":"バージョン管理は?",
            "Anser1":"GITHUBを使いました。\n 大体、DEV branchからfeaturebranch(作業ブランチ)を切って作業をしていました。\n 作業が終わったらPullRequestを投げて 、PUSHする前にはconflictが発生しないように、必ずDEV brunchからPULLをした後、PUSHするように注意していました。\n あとレビューしてもらったり、コメントがあったら修正を行ったり、逆に自分がレビューしたりする形で作業をしていました。",
            "Anser2":""
        },
        {
            "id":2,
            "Question":"レビューをされてどういう部分を保安することになりましたか?",
            "Anser1":"直近のレビュー指摘はBEMを使う際に、部品と状態の使い方について指摘をもらって、今まで自分の使い方が間違えていたことについて気づき、役に立ちました。",
            "Anser2":""
        },
        {
            "id":3,
            "Question":"Reviewした経験と注意していることは? ",
            "Anser1":"はい。あります。\n①変数名や関数名の統一性\n②無駄なloopが無いか確認\n③設計書通り作成されているのか、漏れはないのかを主に確認しました。",
            "Anser2":""
        },
        {
            "id":4,
            "Question":"フロントはどういうふうに進めましたか？\n画面を作成する際の流れについて教えてもらえますか?\n新規プロジェクトに参画した経験ありますか?",
            "Anser1":"1。まず、デザイナーさんからデザインをもらって、デザインツールなどを確認しながらフロントチーム内部で共通の部分を検討するコミュニケーションを行いました。\n2。再利用できる部分があったら各メンバの方で担当を分けてコンポーネントを作成しました。\n3。コンポーネントの作成が人通り終わったらデザイン通り１pxもずれがなうようにmarkupを実施しました。\n4。markupを実施する時はMedia Queryを使ってレスポンシブ対応も並行して作業していました。\n5。画面周りの実装が終わったらAPIの繋ぎこみ作業を実施しました。\n6。あとはデータがちゃんとつながっているのかIT Testを行いました。\n７。シナリオテストを実施しました。",
            "Anser2":""
        },
        {
            "id":5,
            "Question":"多国語対応した経験ありますか？",
            "Anser1":"はい。I18NEXTライブラリを使って対応した経験があります。",
            "Anser2":""
        },
        {
            "id":6,
            "Question":"API結合はどういうふうに作業しましたか?",
            "Anser1":"主にhooksの中でAPIのロジックを作成し、各ページやコンポーネントでそれを呼び出すように作業しました。\nあと、設計書に書いてあるresponseのデータがちゃんと帰ってくるのかを確認をしました。(Googleの開発ツール→ネットワーク)、\nそして、場合によっては追加でFlagなどをバックエンドの方にデータの依頼をする形で作業をしていました。",
            "Anser2":""
        },
        {
            "id":7,
            "Question":"画面の設計したことありますか？(基本設計)",
            "Anser1":"はい。画面項目定義書を作成した経験があります。\n真っ白の状態から作成をした経験はありませんが、既存の画面項目定義書のフォマットをもとに\n画面の項目や条件などを仕様通り作成した経験があります。",
            "Anser2":""
        },
        {
            "id":8,
            "Question":"Component設計したことありますか?(詳細設計)",
            "Anser1":"はい。フロントチーム内部でコミュニケーションしながら共通の部分を検討したり、ATOMIC DESIGNを参考しながらホルダを構成し、どの辺をコンポネート化するかなどを考えながら設計しました。",
            "Anser2":""
        },
        {
            "id":9,
            "Question":"ATOMIC DESIGNで苦しんだことは?",
            "Anser1":"コンポーネントをモレキュールズに入れるか、オーガニズムに入れるか曖昧だった部分が結構発生したため、チームメンバとコミュニケーションをとる時間のコストが高ったです。\n結局、チームメンバと意見し合いながら解決できたし仲良くなれてよりいい成果物になったと思います。",
            "Anser2":""
        },
        {
            "id":10,
            "Question":"STATEはどう管理しましたか?",
            "Anser1":"ステイト管理はREDUXライブラリを使いました。\nPropsを毎回使わずにストアの方にステイトを保管し、修正方法のコードも書いておきました。\n各コンポーネントで必要なステイトをストアの方から取って使っていました。\nそのため可読性がよくなって、ステイト管理しやすかったです。",
            "Anser2":"各APIを叩く際に必要なパラメータをストアの方に保管して活用しました。"
        },
        {
            "id":11,
            "Question":"開発スケジュールは？",
            "Anser1":"Scrum体制で3週間で一回リリースする形で進んでいました。\n基本的に毎日30分づつMEETINGを行い、使っていたツールはジJIRAを主に使っていました。\nJIRAのタスクをみんなと共有しながら、みんなの進捗を把握し、手が空いたら忙しい\n他のメンバを手伝ったりしながら、作業をしていました。",
            "Anser2":""
        },
        {
            "id":12,
            "Question":"IOS、ANDOROID実装経験ありますか?",
            "Anser1":"レスポンシブ対応についての質問でしょうか？\nmedia query使って対応をしていました。",
            "Anser2":""
        },
        {
            "id":13,
            "Question":"Next.jsはどうでしたか?",
            "Anser1":"SSRができるようにしてくれてRederingする時、全てのコンポネートをもらうのではなく分けて必要なコンポネートづつもらう特徴があって、Routingが簡単にできる点と、画面の遷移が早かったです。\nよくなかったどころは、ページを移動するたびに新しいhtmlファイルを呼び出す時、瞬きをするのがUX的によくなかったです。",
            "Anser2":""
        },
        {
            "id":14,
            "Question":"next pageのレンダリングはどうしましたか?",
            "Anser1":"서버로부터 HTML(+CSS,이미지) 파일을 받은 클라이언트는 이 파일을 가지고 클라이언트 브라우저 내에서 DOM, CSSOM, 렌더 트리 등을 생성해 브라우저 화면을 그립니다.",
            "Anser2":""
        },
        {
            "id":15,
            "Question":"TypeScriptを使いながら注意していることありますか?",
            "Anser1":"はい。できるだけanyを使わないように注意しながら作業をしています。コンパイルする時、タイプを指定することです。",
            "Anser2":""
        },
        {
            "id":16,
            "Question":"TASK TOOL",
            "Anser1":"リーダからチケットをもらってそのチケットに対して作業をしていましたが、\n場合によっては自分がチケットを切って作業をしたこともあります。\nそして親チケットから子チケットを作って細分化しながら作業をしていました。",
            "Anser2":""
        },
        {
            "id":17,
            "Question":"TESTしたことありますか?orテストコード作ったことありますか?",
            "Anser1":"はい。Unitテストやprops周りのタイプが合ってるかどうかのテストとイベント取り側のところをJESTを使ってテストした経験があります。",
            "Anser2":""
        },
        {
            "id":18,
            "Question":"テストコード作成したことありますか？",
            "Anser1":"あります。期待値がちゃんと出ているのか確認しながら実装した経験もあります。",
            "Anser2":""
        },
        {
            "id":19,
            "Question":"CSS設計仕様は?",
            "Anser1":"BEMを使いました。\nClassNameだけでマークアップの仕組みが把握できて良かったです。\nSCSSを使っていましたが、相性が良くて使いやすかったです。\nただ、ClassNameが長すぎて一目に入ってこないのが不便でした。",
            "Anser2":""
        },
        {
            "id":20,
            "Question":"ピクセルパーフェクトは？",
            "Anser1":"一応、1pxづれがないように作業をしていますが、たまにデザインが少し微妙な時はリーダさんと相談して調整したり、できるだけ偶数を入れるように作業をしていました。",
            "Anser2":""
        },
        {
            "id":21,
            "Question":"AB TESTは?",
            "Anser1":"現場の方から二つ、多くて三つの案を作っておいて、一回作業した後、検討する形で作業をしていました。AB TESTを実施しました。",
            "Anser2":""
        },
        {
            "id":22,
            "Question":"Tailwind CSSはどうでしたか?",
            "Anser1":"自分も前の現場で初めて使ってみましたが、すでに設定されていて必要な部分だけ修正しながら作業していました。書き方に慣れるまで時間がかかりますが、可読性もよく独自性のあるデザインができますのでもっと勉強してこれから活用したいと思います。",
            "Anser2":""
        },
        {
            "id":23,
            "Question":"好きな作業はなんですか？",
            "Anser1":"好きな作業はPerformance Tuningです。\n自分が書いたコードや他のメンバが書いたコードを全体的に確認する作業なので、勉強にもなるしコードの可読性がよくないように見える場合は、より効率的なコードを書く方法などを調べることが楽しかったです。",
            "Anser2":""
        },
        {
            "id":24,
            "Question":"useMemo useCallback ",
            "Anser1":"はい。useMemoとuseCallbackを使ってやったことあります。\nReturnする値をcashingしたい場合はuseMemo使いました。\nそして関数をcashingしたい場合はuseCallbackを使いました。\ncomponentをcashingしたい場合はMemoを使いました。\n後はライトハウス(chrome tool)に書いてあるPerfomence注意事項に従って作業をしていました。",
            "Anser2":""
        },
        {
            "id":25,
            "Question":"SCSSはどうでしたか?",
            "Anser1":"TailwindCSSの基本設定から気にいらない設定があった場合、SCSSで追加したりしました。\n可読性が良かったです。\nBEMと相性が良かったので使いやすかったです。",
            "Anser2":""
        },
        {
            "id":26,
            "Question":"他の職種と連携したことありますか?",
            "Anser1":"はい。フロントに入ってからは基本デザインパートと意見し合いながら作業をしたことがあります。",
            "Anser2":""
        },
        {
            "id":27,
            "Question":"デザイナと仕事しながら困ったことありませんか？",
            "Anser1":"コンポーネントについて概念が立てないデザイナさんと仕事した経験もありますが、最初は説明する時間のコストがかかってしましましたが、コミュニュケーションをとりながら仲良くなり、結果的にはよりいい成果物になったと思います。",
            "Anser2":""
        },
        {
            "id":28,
            "Question":"技術勉強はどうやって？",
            "Anser1":"YOUTUBEやBLOGを見ながら最新トレンドの技術を見たりしています。\nそこで気になっている技術があったら公式サイトの方で勉強しました。",
            "Anser2":""
        },
        {
            "id":29,
            "Question":"GraphQLはなんですか?",
            "Anser1":"APIをより楽に使えるためのquery言語で、APIデータを持ってくる時、全部ではなく必要なデータのみとってくることができます。",
            "Anser2":"clientはReact apolloを使用しました。"
        },
        {
            "id":30,
            "Question":"useQuery(ライブラリ)とは?",
            "Anser1":"普段はAPIのデータが必要な時、毎回そのAPIデータを requestしますが、React-queryを使ってuseQueryで囲んでAPIのデータを一回読みます。\nその後cashingをして、また呼び出す必要がなくなり、Requestしなくても使えるライブラリです。",
            "Anser2":""
        },
        {
            "id":31,
            "Question":"ログインの方はどうやって対応していましたか?",
            "Anser1":"ログイン周りはsessionとcookieを利用した認証方式で行っていました。\nsessionの方はサーバー側で、cookieの方はクライアント側で管理していました。",
            "Anser2":""
        }
    ]
}